import 'bootstrap/dist/css/bootstrap.min.css';
import { GlobalContextProvider } from './context/context';
import { ProductContextProvider } from './context/ProductContext';
import { CartContextProvider } from './context/CartContext';
import { CartPageContextProvider } from './context/CartPageContext';
import { BlogContextProvider } from './context/BlogContext';
import { config } from '@fortawesome/fontawesome-svg-core';
import '@fortawesome/fontawesome-svg-core/styles.css'; // Import core styles
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.scss";
import React, { useMemo } from 'react';
import { notification } from 'antd';
import { NotificationContext } from './context/NotificationContext'; // Adjust the import path as necessary

config.autoAddCss = false; // Prevent duplicate loading in Next.js
const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
 title: "Hair Haven",
 description: "Generated by create next app",
};

const RootLayout = ({ children }: Readonly<{ children: React.ReactNode; }>) => {
 const [api, contextHolder] = notification.useNotification();

 const openNotification = (placement : any, message : any) => {
    api.info({
      message: `Notification ${placement}`,
      description: <NotificationContext.Consumer>{({ name } : any) => `${message}, ${name}!`}</NotificationContext.Consumer>,
      placement,
    });
 };

 const contextValue : any = useMemo(
    () => ({
      name: 'Ant Design',
      openNotification, // Include the function in the context value
    }),
    [],
 );

 return (
    <NotificationContext.Provider value={contextValue}>
      <CartContextProvider>
        <BlogContextProvider>
          <GlobalContextProvider>
            <ProductContextProvider>
              <CartPageContextProvider>
                <html lang="en">
                 <body className={inter.className}>
                    {children}
                 </body>
                </html>
              </CartPageContextProvider>
            </ProductContextProvider>
          </GlobalContextProvider>
        </BlogContextProvider>
      </CartContextProvider>
    </NotificationContext.Provider>
 );
};

export default RootLayout;
